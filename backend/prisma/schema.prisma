// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String?

  address     String?
  phoneNumber String?

  UserBook UserBook[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ExchangeProposal ExchangeProposal[]
}

model Book {
  id     Int    @id @default(autoincrement())
  title  String
  author String
  photo  String?

  BookCategory BookCategory[]
  UserBook     UserBook[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ExchangeProposal ExchangeProposal[]
}

model UserBook {
  userId Int
  bookId Int

  user              User               @relation(fields: [userId], references: [id])
  book              Book               @relation(fields: [bookId], references: [id])
  proposedExchanges ExchangeProposal[] @relation("ProposedBook")
  askedExchanges    ExchangeProposal[] @relation("AskedBook")

  @@id([userId, bookId])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  BookCategory BookCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookCategory {
  bookId     Int
  categoryId Int

  book     Book     @relation(fields: [bookId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([bookId, categoryId])
}

enum ExchangeProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model ExchangeProposal {
  id             Int @id @default(autoincrement())
  proposerUserId Int
  askedUserId    Int

  proposedBookId Int
  askedBookId    Int

  status ExchangeProposalStatus @default(PENDING)

  proposedBook UserBook @relation("ProposedBook", fields: [proposerUserId, proposedBookId], references: [userId, bookId])
  askedBook    UserBook @relation("AskedBook", fields: [askedUserId, askedBookId], references: [userId, bookId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]

  Book Book[]
}
